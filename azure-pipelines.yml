trigger:
  - main

pool:
  name: Default

steps:
  # Step 1: Check if `idir` exists as an artifact from the previous build
  - task: PowerShell@2
    displayName: 'Check if idir Exists as Artifact'
    inputs:
      targetType: 'inline'
      script: |
        $artifactExists = Test-Path "$(Pipeline.Workspace)/idir"
        if ($artifactExists) {
          Write-Output "##vso[task.setvariable variable=IdirExists;isOutput=true]true"
        } else {
          Write-Output "##vso[task.setvariable variable=IdirExists;isOutput=true]false"
        }
    name: CheckIdir

  # Step 2: Download `idir` if it exists and run Incremental Scan
  - task: DownloadPipelineArtifact@2
    displayName: 'Download idir Artifact'
    inputs:
      artifact: 'idir'
      targetPath: '$(Build.Repository.LocalPath)/idir'
    condition: eq(dependencies.CheckIdir.outputs['CheckIdir.IdirExists'], 'true')  # Run only if `idir` exists

  # Step 3: Run Incremental Analysis if `idir` exists
  - task: synopsys-coverity@1
    displayName: 'Run Incremental Coverity Analysis'
    inputs:
      coverityService: 'coverity-connect'
      projectName: 'test'
      streamName: 'test'
      coverityBuildDirectory: '$(Build.Repository.LocalPath)'
      coverityAnalysisType: 'incremental'
      allowUntrusted: true
      covDesktopArgs: '--analyze-captured-source'
    condition: eq(dependencies.CheckIdir.outputs['CheckIdir.IdirExists'], 'true')  # Run only if `idir` exists

  # Step 4: Run Full Scan if `idir` does not exist (first run or previous build failed)
  - task: synopsys-coverity@1
    displayName: 'Run Coverity Full Scan'
    inputs:
      coverityService: 'coverity-connect'
      projectName: 'test'
      streamName: 'test'
      coverityBuildDirectory: '$(Build.Repository.LocalPath)'
      coverityAnalysisType: 'full'
      buildCommand: 'mvn clean install'
      allowUntrusted: true
      covAnalyzeArgs: '--webapp-security'
    condition: eq(dependencies.CheckIdir.outputs['CheckIdir.IdirExists'], 'false')  # Run if `idir` does not exist

  # Step 5: Publish the `idir` as a pipeline artifact after the full scan
  - task: PublishPipelineArtifact@1
    displayName: 'Publish idir as Artifact'
    inputs:
      targetPath: '$(Build.Repository.LocalPath)/idir'
      artifact: 'idir'
      publishLocation: 'pipeline'
    condition: eq(dependencies.CheckIdir.outputs['CheckIdir.IdirExists'], 'false')  # Publish only after full scans
